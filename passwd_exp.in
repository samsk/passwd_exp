#!@PERL@
# PROGRAM	: passwd_exp 0.5.9 (pre-release)
# PURPOSE	: warns of account expiration via email
# AUTHOR	: Samuel Behan <behan@frida.fri.utc.sk> (c) 2000-2001
# HOMEPAGE	: http://frida.fri.utc.sk/~behan/passwd_exp
# LICENSE	: GNU GPL v2 or later, NO WARRANTY VOID (see file LICENSE)
################################################################################

use spent;
use POSIX qw(uname strftime);
use RcReader qw( rc_init rc_set rc_parse rc_stop rc_free );
use vars qw($VERSION $AUTHOR $SENDER $CONFIG_FILE $LOCK_FILE $SHADOW_FILE 
		%MESSG_ENV %CONFIG %CONST);
require 'getopts.pl';
$VERSION	= "0.5.9 (pre-release)";
$AUTHOR		= "Samuel Behan <behan\@frida.fri.utc.sk>";
$AGENT		= "Password expiration agent";

##
# Default settings (we dont need config file at all)
$prefix		= "@prefix@";
$SHADOW_FILE	= undef;
$CONFIG_FILE	= "@sysconfdir@/passwd_exp.conf";
$LOCK_FILE	= "/var/lib/passwd_exp.status";
$ENV{'PATH'}	= "/bin:/sbin:/usr/bin:/usr/sbin";
undef($prefix);
#admin mode messages
$MESSAGE{"EXPIRING"}	= " '%user%'[%ustate%] will expire in %expire_days% on %expire_date%";
$MESSAGE{"EXPIRED"}	= " '%user%'[%ustate%] has been expired on %expire_date% (%expire_days% days ago)";
$MESSAGE{"INACTIVING"}	= " '%user%'[%ustate%] will become inactive in %inactive_days% on %inactive_date%";
$MESSAGE{"INACTIVED"}	= " '%user%'[%ustate%] has been inactived on %inactive_date% (%inactive_days% days ago)";
#defaults for message variables
$MESSG_ENV{"host_name"}	= $MESSG_ENV{"hostname"} = $MESSG_ENV{"host"}	= (uname())[1];
$MESSG_ENV{"host_domain"}	= (uname())[1]; $MESSG_ENV{"host_domain"} =~ s/^(.*)?\.//o;
$MESSG_ENV{"domain"}	= $MESSG_ENV{"host_domain"};
$MESSG_ENV{"host_os"}	= $MESSG_ENV{"os"}	= (uname())[0];
$MESSG_ENV{"host_osver"}= $MESSG_ENV{"osver"}	= (uname())[2];
$MESSG_ENV{"host_machine"}= $MESSG_ENV{"machine"}	= (uname())[4];
#default configuration
$CONFIG{"LOCALE"}	= $ENV{"LC_ALL"};
$CONFIG{"CHANGE_WARN"}	= 14;
$CONFIG{"BANNER"}	= 1;
$CONFIG{"DIRECT_MTA"}	= @HAVE_SENDMAIL@;
$CONFIG{"MAILER"}	= "@MAILX@ %recipient -s %subject%";
$CONFIG{"MTA"}		= "@SENDMAIL@";
$CONFIG{"WARN_SUBJECT"}	= "Warning: Your account will expire soon";
$CONFIG{"WARN_BODY"}	= "
                                                  %locale_time% %locale_date%

Dear %username% (%user%@%hostname%),
    %system% has detected that your password will expire in %expire_days% days
    (on %expire_date%). Please change your password immediately or your
    account will be automaticaly disabled.
    
    				Your's root\n\n";
$CONFIG{"EXPIRED_WARN"}	= 1;
$CONFIG{"EXPIRED_SUBJECT"}= "Warning: Your account will be disabled soon";
$CONFIG{"EXPIRED_BODY"}	= "\
                                                  %locale_time% %locale_date%

Dear %username% (%user%@%hostname%),
    %system% has detected that your password has been expired %expire_days% days
    ago and will be disabled in %inactive_days% days (on %inactive_date%)
    Please change your password immediately or your account will be 
    automaticaly inactivated.
    
    				Your's root\n\n";


##
# Print usage help
sub usage(;$)
{ defined($_[0]) && warn("	-- $_[0]\n");
  print "usage: $0 [-u user ] [options]
      -- passwd_exp $VERSION by $AUTHOR
[options]
	-l	list all expired/inactivated acounts
	-i	ignore nocheck file
	-t	test mode, print e-mail(s) to stdout
	-T	test mode, check config file only
	-u user	check only this user
	-c file	path to config file (default is $CONFIG_FILE)
	-v	verbose mode
	-V	print version information
	-h	print this help\n";
  defined($_[0]) && exit(1);
  exit(0);
}

##
# Print verbose messages
sub verbose($)
{ if($CONFIG{"VERBOSE"})
  { syswrite(STDOUT, $_[0]); return 1; }
  return 0; 
}
  
##
# callback function (var, value, start_line, current_line, file, sections)
sub configure($$;$$$$)
{
  sub isbool{if($_[0]=~/^yes|ok|allow|enable|1|true$/oi){ return 1;} else{ return undef;}}
  sub localize{ defined($_[0]) || return $_[1]; my($q) = $_[0];
    $q =~ s/(\*)|(\?)|([\^\$\|\(\)\[\]\*\+\{\}])/${
    	defined($1) ? \('.*') : (defined($2) ? \('.') : \("\\$3")) }/og;
    ($CONFIG{"LOCALE"} =~ /^$q$/) && return $_[1]; return undef; }
  $_	= $_[0];
  if(/^var(iable)?\[(.*?)\](\[(.*)\])?$/o)	#for constants definintion
  { my($l) = localize($4,$_[1]);
    if(defined($2) && defined($l)) { $CONST{$2} = $l; } }
  elsif(/^locale$/o)
  { if(defined($_[1]) && ($_[1] ne "auto")) {
      $CONFIG{"LOCALE"}	= $_[1]; } }
  elsif(/^direct(\s*|_)mta$/o)
  { $CONFIG{"DIRECT_MTA"} = isbool($_[1]); }
  elsif(/^(mail((er)|(\s*|_)sender)?)$/o)
  { if(substr($_[1], 0, 1) ne '/')
    { my($dir, $cfile) = ($1, $CONFIG_FILE); $cfile =~ s/(.*\/)*//og;
      warn("[$cfile:$_[2]] absolute path required for '$dir'\n");
      return rc_stop(-2); }
    $CONFIG{"MAILER"}	= $_[1]; }
  elsif(/^(mta|mail(\s*|_)agent)$/o)
  { if(substr($_[1], 0, 1) ne '/')
    { my($dir,$cfile) = ($1, $CONFIG_FILE); $cfile =~ s/(.*\/)*//og;
      warn("[$cfile:$_[2]] absolute path required for '$dir'\n");
      return rc_stop(-2); }
    $CONFIG{"MTA"}	= $_[1]; }
  elsif(/^fortune$/o)
  { $CONFIG{"FORTUNE"}	= $_[1]; }
  elsif(/^(print(\s*|_))?banner$/o)
  { $CONFIG{"BANNER"}	= isbool($_[1]); }
  elsif(/^(no(\s*|_)warnings?|ignore(\s*|_)users)(\s*(\.|\+))?$/o)
  { if(defined($3)) { $CONFIG{"NOSEND"} .= ' '.$_[1]; }
    else { $CONFIG{"NOSEND"} = $_[1]; } }
  elsif(/^(no(\s*|_)check((\s*|_)file)?|ignore(\s*|_)file)$/o)
  { $CONFIG{"NOCHECK"}	= $_[1]; }
  elsif(/^(warn(\s*|_)days)$/o)
  { my ($dir) = $1; if($_[1] =~ /^\d+$/o) { $CONFIG{"WARN_DAYS"} = $_[1]; }
    else { my($cfile) = $CONFIG_FILE; $cfile =~ s/(.*\/)*//og;
           warn("[$cfile:$_[2]] '$dir' requires digit as value\n"); 
	   return rc_stop(-2); } }
  elsif(/^(warn(\s*|_))?date(\s*|_)expired$/o)
  { $CONFIG{"DATE_EXPIRED"}	= isbool($_[1]); }
  elsif(/^(ws|warn(ing)?(\s*|_)subject)(\[(.*)\])?$/o)
  { $CONFIG{"WARN_SUBJECT"} = localize($5, $_[1]) || $CONFIG{"WARN_SUBJECT"};
    if(length($_[1]) > 50)
    { my($cfile) = $CONFIG_FILE; $cfile =~ s/(.*\/)*//og;
      warn("[$cfile:$_[2]] mail subject should not be longer than 50 characters\n"); } }
  elsif(/^(wb|warn(ing)?(\s*|_)body)(\[(.*)\])?$/o)
  { $CONFIG{"WARN_BODY"}    = localize($5, $_[1]) || $CONFIG{"WARN_BODY"}; }
  elsif(/^warn(\s*|_)expired$/o)
  { $CONFIG{"EXPIRED_WARN"} = isbool($_[1]); }
  elsif(/^(es|expired(\s*|_)subject)(\[(.*)\])?$/o)
  { $CONFIG{"EXPIRED_SUBJECT"} = localize($4, $_[1]) || $CONFIG{"EXPIRED_SUBJECT"};
    if(length($_[1]) > 50)
    { my($cfile) = $CONFIG_FILE; $cfile =~ s/(.*\/)*//og;
      warn("[$cfile:$_[2]] mail subject should not be longer than 50 characters\n"); } }
  elsif(/^(eb|expired(\s*|_)body)(\[(.*)\])?$/o)
  { $CONFIG{"EXPIRED_BODY"} = localize($4, $_[1]) || $CONFIG{"EXPIRED_BODY"}; }
  else
  { my($cfile) = $CONFIG_FILE; $cfile =~ s/(.*\/)*//og;
    warn("[$cfile:$_[2]] unknown directive '".substr($_[0], 0, 25)."' found\n");
    return rc_stop(-1);	}	#wana stop parser and report custom error -1
  return 1;
}

##
# configuration error reporting function(parser error, custom (error), 
#	startline, curentline, file, section)
sub configure_error(@)
{
  my($cfile) = $CONFIG_FILE; $cfile =~ s/(.*\/)*//og;
  if($_[0] == -1) {}		#custom error
  elsif($_[0] == -2)
  { warn("[$cfile:$_[2]] Can't find string terminator '$_[1]' anywhere before EOF\n"); }
  elsif($_[0] == -3) {}		#multiline comment error
  return undef;
}

##
# Send mail(via sendmail/mail) sub(user, subject, message)
sub sendmail($$$)
{ my($MAILER)	= ($CONFIG{"MAILER"});
  my($RECIPIENT, $SUBJECT, $MESSAGE) = (shift(@_), shift(@_), shift(@_));
  
  $SUBJECT	= apply_mesgenv($SUBJECT);
  $MESSAGE	= apply_mesgenv($MESSAGE);

  if(defined($opt_t))
  { open(MAIL, ">&STDOUT") || die("passwd_exp: failed to open stdout\n");
    syswrite(MAIL, "From: $AGENT <root\@localhost>\n");
    syswrite(MAIL, "To: ".($pw_ent[6] || $pw_ent[0])." <$RECIPIENT>\n");
    syswrite(MAIL, "Subject: $SUBJECT\n\n"); }
  elsif($CONFIG{'DIRECT_MTA'})	#we will use sendmail directly
  { if(!open(MAIL, "|$CONFIG{MTA} -i -U '$RECIPIENT'"))
    { warn("passwd_exp: (mta) mail transport agent was unable send e-mail using\n");
      warn("            '$CONFIG{MTA}' - $!\n");
      return undef; }
    #print my headers
    syswrite(MAIL, "From: $AGENT <root\@localhost>\n");
    syswrite(MAIL, "To: ".($pw_ent[6] || $pw_ent[0])." <$RECIPIENT>\n");
    syswrite(MAIL, "Subject: $SUBJECT\n");
    syswrite(MAIL, "Full-Name: $MESSG_ENV{username}\n");
    syswrite(MAIL, "X-Mailer: passwd_exp $VERSION by $AUTHOR\n\n");
  }
  else				#else /bin/mail style will be used
  { $SUBJECT	=~ s/(\\\')|(\')/${ defined($2) ? \("\\'") : \$1 }/og;
    $SUBJECT	= '"'.$SUBJECT.'"';
    $MAILER	=~ s/%subj(ect)?%/$SUBJECT/og;
    if($MAILER	!~ s/([\"\'])?%recip(ient)?%(\1)?/'$RECIPIENT'/og)
    { warn("passwd_exp: (mailer) mail program doesn't accepts recipient as command\n");
      warn("		line argument (possible configuration error)\n");
      return undef; }
    if(!open(MAIL, "|$MAILER &>/dev/null"))	#open mail pipe
    { warn("passwd_exp: (mailer) unable to send e-mail using '$MAILER'\n");
      warn("            Reported error: $!\n");
      return undef; } }
  #prinout message to pipe (unbufered)
  syswrite(MAIL, $MESSAGE."\n");
  if($CONFIG{"BANNER"})			#print banner
  { syswrite(MAIL, "\n---\nThis message was produced by:\n");
    syswrite(MAIL, "   passwd_exp $VERSION by $AUTHOR\n");	}
  close(MAIL);
  wait;				#wait a bit(just to be sure)
  return 1;
}

##
# Apply message enviroment
sub apply_mesgenv($)
{
  $_[0] =~  s/(%(.+?)%)/${exists($MESSG_ENV{$2}) ? \$MESSG_ENV{$2} : \$1}/og;
  $_[0]	=~ s/%((w|warn(ing)?)|(e|expire)|(c|curr?(ent)?))(_|\.|->|=>)%?
  		([aAbBcCdDeEgGhHIjkmMOpPrsStTuUVwWxXyYzZ\+])%/${
  	($2) ? \strftime("%$8", localtime(time() + $expire_days * 86400)) :
	(($4) ? \strftime("%$8", localtime(time() + $inactive_days * 86400)) :
	 \strftime("%$8", localtime(time())))}/xg;
  return $_[0];
}

##
# Make message enviroment
sub make_mesgenv($$)
{
  my($expire, $key);
  $expire		= $sp_ent[2] + $sp_ent[4];
  if(($sp_ent[7] > 0) && ($sp_ent[7] < $expire))
  { $expire 	= $sp_ent[7]; }
  $MESSG_ENV{'user'}	= $MESSG_ENV{'recipient'}	= $sp_ent[0];
  $MESSG_ENV{'user_name'}	= $MESSG_ENV{'username'}= $pw_ent[6] || $sp_ent[0];
  $MESSG_ENV{'home_dir'}	= $MESSG_ENV{'homedir'}	= $pw_ent[7];
  $MESSG_ENV{'expire_in'}	= $MESSG_ENV{'expire_days'} = 
  	$MESSG_ENV{'edays'}	= abs($_[0]);
  $MESSG_ENV{'expire_date'}	= $MESSGE_ENV{'edate'}	= 
  		strftime("%a %e %B %Y",localtime($expire * 86400));
  $MESSG_ENV{'inactive_in'}	= $MESSG_ENV{'inactive_days'} = 
  	$MESSG_ENV{'idays'}	= abs($_[1]);
  $MESSG_ENV{'inactive_date'}	= $MESSG_ENV{'idate'}	= 
  		strftime("%a %e %B %Y",localtime(time() + ($_[1] * 86400)));
  $MESSG_ENV{'deny_check'}	= $MESSG_ENV{'nocheck'}	= 
      $MESSG_ENV{'ignore_file'}	= $CONFIG{'NOCHECK'};
  $MESSG_ENV{'date'}		= strftime("%A %e %B %Y",localtime(time()));
  $MESSG_ENV{'locale_date'}	= $MESSG_ENV{'ldate'}	=
		  strftime("%x",localtime(time()));
  $MESSG_ENV{'time'}		= strftime("%H:%M:%S",localtime(time())); 
  $MESSG_ENV{'locale_time'}	= $MESSG_ENV{'ltime'}	=
  		strftime("%X",localtime(time()));
  $MESSG_ENV{'unix_time'}	= strftime("%s",localtime(time()));
  #my variables
  $MESSG_ENV{'agent'}		= $MESSG_ENV{'sender'}	= $AGENT;
  $MESSG_ENV{'version'}		= $MESSG_ENV{'ver'}	= $VERSION;
  #user constants
  foreach $key (keys(%CONST))
  { $MESSG_ENV{$key}		= apply_mesgenv($CONST{$key});	}
  $MESSG_ENV{'version'}		= $MESSG_ENV{'ver'}	= $VERSION;
}

################
# MAIN PROGRAM #
################

#read command line arguments
&Getopts("c:u:lfitTvVh")	|| usage("unknown parameter");
defined($opt_h)	&& usage();
defined($opt_c) && ($CONFIG_FILE	= $opt_c);
defined($opt_v) && ($CONFIG{"VERBOSE"}	= 1	);
if($opt_V) { print "$VERSION by $AUTHOR\n"; exit(0); }

#read configurtion file
if( -r $CONFIG_FILE )
{ rc_init();
  rc_set("divider", '\s*=\s*');
  rc_set("comments", ["bash_style"]);
  rc_set("line_control", undef);
  rc_set("sections", '%');
  open(CFG, $CONFIG_FILE) || die("passwd_exp: can not open config file '$CONFIG_FILE' - $!\n");
  my(@retval) = rc_parse(*CFG, \&configure);
  ($retval[0] != 1) && (configure_error(@retval) || exit(1));
  close(CFG);
  rc_free(); }
elsif(defined($opt_c))		#user explicitly required config file
{ die("passwd_exp: missing config file '$CONFIG_FILE' - $!\n"); }
else
{ warn("passwd_exp: missing config file '$CONFIG_FILE', using defaults...\n"); }
if(defined($opt_T)) { print "passwd_exp: Syntax OK\n"; exit(0); }

#once day limiter (if somebody runs this sooner than one day from last run)
if(!$opt_f && !$opt_l && !$opt_u)
{ my(@finfo)	= stat($LOCK_FILE);
  if($finfo[9] > (time() - (22*3600)))
  { warn("passwd_exp: trying to perform expiration check too soon (use -f to\n");
    die("            override). Check should be perfomed maximaly once a day !!!\n"); }
  if(open(LOCK, ">$LOCK_FILE"))
  { syswrite(LOCK, strftime("%a %b %e %H:%M:%S %Y",localtime(time())));
    close(LOCK); } }

#ok, open shadow database... (down is little help)
# (0name, 1password, 2change_last, 3change_may, 4change_must, 5change_warn,
#	6max_inactive, 7expire_date)	= getsp*
setspent($SHADOW_FILE)	|| die("passwd_exp: error manipulating shadow database - $!\n");
setpwent();

#maybe, we wana check only one user
if(defined($opt_u))
{ @sp_ent = getspnam($opt_u);
  defined($sp_ent[0]) || die("passwd_exp: (shadow) user '$opt_u' doesn't exists !!!\n");
  goto CHECK;	#stupit goto ;-)
  exit(0); }

while((@sp_ent  = getspent()))
{ CHECK:
  $expire_days = $inactive_days = $date_expired = undef;

  #check wheter account is active/not disabled/ne
  if(($sp_ent[1] eq '*' || $sp_ent[1] eq '!!')	#account disabled
  	|| (!$sp_ent[2]) || ($sp_ent[2] <= 0)	#never used
	|| ((!defined($sp_ent[4]) || $sp_ent[4] == -1) 
		&& !$sp_ent[7])			#never expires
	|| ((!defined($sp_ent[5]) || $sp_ent[5] == -1) 	#without warnings
  		&& (!$opt_l && !$CONFIG{'WARN_DAYS'})))
  { next; }

  $MESSG_ENV{'ustate'}		= undef;
  #check wheter wheter ser should not receive warning
  if(defined($CONFIG{'NOSEND'}) &&
  	 $CONFIG{'NOSEND'} =~ /(^|,|;|\s)\s*$sp_ent[0]\s*(\s|;|,|$)/)
  { defined($opt_l) || next;
    $MESSG_ENV{'ustate'}	.= 'S'; }
  #load passwd database settings
  @pw_ent	= getpwnam($sp_ent[0]); 
  ($pw_ent[0]) || warn("passwd_exp: user '$sp_ent[0]' missing in passwd database\n");
  #check whter user does'nt whant to receive warning messages
  if(defined($CONFIG{'NOCHECK'}) && defined($pw_ent[7]))
  { if( -e "$pw_ent[7]/$CONFIG{NOCHECK}" )
    { (defined($opt_l) || defined($opt_i)) || next;
      $MESSG_ENV{'ustate'}	.= 'C'; } }
  #and now compute the expiration days remaining....
  $expire_days	= ($sp_ent[2] + $sp_ent[4]) - int(time() / 86400);
  #for user with hard set expiration date
  if($CONFIG{'DATE_EXPIRED'} && defined($sp_ent[7]) && ($sp_ent[7] ne '') 
  	&& ($sp_ent[7] > 0))
  { $date_expired	= $sp_ent[7] - int(time() / 86400);
    if($expire_days > $date_expired)
    { $expire_days = $date_expired;
      $MESSG_ENV{'ustate'} .= 'D'; } }
  #if no expiration days set, use default (only in -l mode, else we will not get here)
  if(!defined($sp_ent[5]) || $sp_ent[5] <= 0)
  { $sp_ent[5]	= $CONFIG{'CHANGE_WARN'};	}
  if($CONFIG{'WARN_DAYS'})
  { $sp_ent[5]	= $CONFIG{'WARN_DAYS'};	}
  #compute days to get inactive (ony if set)
  $inactive_days	= $expire_days + $sp_ent[6];
  #and now look wheter user should be warned, else skip
  ($expire_days > $sp_ent[5]) && next;
  defined($MESSG_ENV{'ustate'}) || ($MESSG_ENV{'ustate'} = 'N');

  #and now send mail to the user
  my($msg_mode, $mode) = (undef, undef);
  make_mesgenv($expire_days, $inactive_days);
  #what to do: warn expiring or inactiving...
  if(($expire_days > 0) && ($expire_days <= $sp_ent[5]))
  { ($msg_mode, $mode)	= ('EXPIRING', 'WARN'); }
  elsif(($inactive_days >= 0 && $inactive_days <= $sp_ent[6]
  		|| $sp_ent[6] < 0) && !$date_expired)
  { if($sp_ent[6] < 0) 
    { ($msg_mode, $mode) = ('INACTIVING', ($CONFIG{'EXPIRED_WARN'} ? 'EXPIRED' : undef)); }
    else
    { $msg_mode = 'EXPIRED'; } }
  elsif($inactive_days && $inactive_days < 0)
  { $msg_mode	= 'INACTIVED'; }
  else { die('passwd_exp: please, report programing error'); } #st. went wrong

  #print message (in super mode)
  if($opt_l && $msg_mode)
  { my($message)	= $MESSAGE{$msg_mode};
    $message	= apply_mesgenv($message);
    syswrite(STDOUT, $message."\n"); }
  elsif(defined($mode))	#else send mail
  { verbose(" -->Sending \L$mode\E mail to user '$sp_ent[0]'...\n");
    if(!sendmail($sp_ent[0], $CONFIG{$mode.'_SUBJECT'}, $CONFIG{$mode.'_BODY'}))
    { die("passwd_exp: error occured while sending mail - $!\n"); } }
}

#close database
endpwent();
endspent();

#EOF (c) by UN*X 1970-$(end of days)
